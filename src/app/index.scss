@import '~@patternfly/patternfly/sass-utilities/_all';

.pf-c-brand {
  width: 200px;
}
.summit-demo-hero {

  background: url("../images/fedora-background-left.svg");
  background-repeat: no-repeat;
  background-size: cover;

  h1.pf-c-title {
    color: white;
    text-align: center;
    font-size: 44px;
  }
  h2 {
    text-align: center;
    font-size: 18px;
    color: var(--pf-global--Color--200);
  }

  @media screen and (min-width: $pf-global--breakpoint--xs) {
    min-height: 400px;
  }

  @media screen and (min-width: $pf-global--breakpoint--md) {
    min-height: 550px;
  }
}

// Convert px to rem
// =================================================================/
@mixin rem($property, $values) {

  // Create a couple of empty lists as output buffers.
  $font-size: 16px;
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {

    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if type-of($value) == number and not unitless($value) and (unit($value) == px) {

      // px value given - calculate rem value from font-size
      $new-rem-value: $value / $font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, unquote("#{$new-rem-value}rem"));

    } @else if type-of($value) == number and not unitless($value) and (unit($value) == '%') {

      // % value given - don't add px or rem
      $px-values: join($px-values, unquote(#{$value}));
      $rem-values: join($rem-values, unquote(#{$value}));

    } @else if $value == auto {

      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);

    } @else {

      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $font-size));
      $rem-values: join($rem-values, unquote("#{$value}rem"));
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;

}

@mixin center {
  margin-left: auto;
  margin-right: auto;
  text-align: center;
}

.summit-demo-marketing {

  @include rem('padding-top', 40px);

  .pf-c-card__header,
  .pf-c-card__body,
  .summit-demo-application-logo,
  .pf-c-card__footer { @include center; }

  .summit-demo-application-logo {
    width: 300px;
  }
  .pf-c-card {
    @include rem('padding', 40px 0);
    .summit-demo-application-info__logo {
      @include rem('height', 65px);
    }
    .pf-c-card__footer { margin-top: 40px; }
  }

  .pf-l-split.pf-m-gutter > :not(:last-child) { @include rem('margin-right', 7.5px); }

  .summit-demo-open-card { color: var(--pf-global--link--Color); }

  .summit-demo-card__link:hover {
    text-decoration: none;
    .summit-demo-open-card {
      color: var(--pf-global--link--Color--hover);
      text-decoration: underline;
    }
  }
}

